name: Run test suite on PR

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: set up Python 
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Install development dependencies
        run: pip install -r requirements-dev.txt
      - name: Run pytest
        run: pytest --cov=taskman -n auto
      #So far the code for Assignment1

      #For exercise 2 from here

      #Submit the results to a service measuring the code by codecov
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      #Integrate a security scanner into the pipeline that analyses our code and dependencies by snyk.
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Install snyk
        run: npm install -g snyk
      - name: Scan for security vulnerabilities
        run: |
          snyk auth ${{ secrets.SNYK_TOKEN }}
          snyk test --file=requirements.txt

      # #build a Github container and pushing it to the github container registry.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ghcr.io/mrhs-sem/my_package:${{ github.sha }}

      #For exercise 3 from here
      # - name: Authenticate with Google Cloud
      #   uses: 'google-github-actions/auth@v1'
      #   with:
      #     workload_identity_provider: 'projects/xxx/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
      #     service_account: 'hshn-devsecops-service-account@hs-heilbronn-devsecops.iam.gserviceaccount.com'

      # This time I didn't have permission to modify the Google Artifact Registry, so I separately built Docker and pushed it to Google Cloud without using the code below which can build and push automatically.
      # -> Change my approach to deploy not from image but from source
      # - name: Build and push Docker image to Google Artifact Registry
      #   run: |
      #     docker build -t local-image .
      #     docker tag local-image europe-west3-docker.pkg.dev/hs-heilbronn-devsecops/cloud-run-source-deploy/taskman-mrhs-sem@sha256:xxx
      #     docker push europe-west3-docker.pkg.dev/hs-heilbronn-devsecops/cloud-run-source-deploy/taskman-mrhs-sem@sha256:xxx
